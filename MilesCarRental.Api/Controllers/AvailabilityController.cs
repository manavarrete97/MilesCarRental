using System.ComponentModel;
using Microsoft.AspNetCore.Mvc;
using MediatR;
using MilesCarRental.Application.Availability.Queries.GetAvailability;
using MilesCarRental.Application.Availability.Queries.GetMockAvailability;
using Swashbuckle.AspNetCore.Filters;
using Req = MilesCarRental.Domain.Availability.Request;
using Res = MilesCarRental.Domain.Availability.Response;

namespace MilesCarRental.Api.Controllers
{
    /// <summary>
    /// Availability endpoints. Exposes real provider query via quickSearch and a configurable mock endpoint.
    /// </summary>
    [ApiController]
    [Route("api/availability")]
    public class AvailabilityController : ControllerBase
    {
        private readonly IMediator _mediator;

        public AvailabilityController(IMediator mediator) => _mediator = mediator;

        /// <summary>
        /// Calls the real MilesCar API using a quickSearch token previously generated by the website.
        /// </summary>
        /// <param name="quickSearch">Opaque token that reproduces a specific search.</param>
        /// <param name="ct">Cancellation token.</param>
        /// <returns>Availability payload as returned by the external provider.</returns>
        /// <response code="200">Availability retrieved successfully.</response>
        /// <response code="400">Missing quickSearch parameter.</response>
        /// <response code="502">Downstream provider error.</response>
        [HttpGet]
        [ProducesResponseType(typeof(Res.Rootobject), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status502BadGateway)]
        public async Task<ActionResult<Res.Rootobject>> Get(
            [FromQuery, DefaultValue("QS-EXAMPLE-TOKEN")] string quickSearch,
            CancellationToken ct)
        {
            if (string.IsNullOrWhiteSpace(quickSearch))
                return BadRequest("quickSearch es requerido.");

            try
            {
                var result = await _mediator.Send(new GetAvailabilityQuery(quickSearch), ct);
                return Ok(result);
            }
            catch (HttpRequestException ex)
            {
                return StatusCode(StatusCodes.Status502BadGateway, new { message = ex.Message });
            }
        }

        /// <summary>
        /// Returns a mock availability response using dates and locations (ISO country codes) to simulate market rules.
        /// </summary>
        /// <param name="pickupDate">UTC pickup date. Example: 2025-01-15T10:00:00Z</param>
        /// <param name="returnDate">UTC return date. Example: 2025-01-20T10:00:00Z</param>
        /// <param name="pickupCity">Pickup city, e.g. Medellín or Miami.</param>
        /// <param name="pickupCountry">Pickup country ISO alpha-2 code, e.g. CO or US.</param>
        /// <param name="returnCity">Return city, e.g. Bogotá or Orlando.</param>
        /// <param name="returnCountry">Return country ISO alpha-2 code.</param>
        /// <param name="customerCountry">Customer country ISO alpha-2 code used to derive the market.</param>
        /// <param name="ct">Cancellation token.</param>
        /// <remarks>
        /// If parameters are omitted, defaults are applied so the endpoint can be executed directly from Swagger UI.
        /// </remarks>
        /// <returns>Mock availability payload honoring market-specific filtering and currency rules.</returns>
        /// <response code="200">Mock availability generated successfully.</response>
        /// <response code="400">Invalid or missing dates.</response>
        [HttpGet("mock")]
        [ProducesResponseType(typeof(Res.Rootobject), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [SwaggerRequestExample(typeof(IDictionary<string, object>), typeof(MilesCarRental.Api.SwaggerExamples.AvailabilityMockQueryExample))]
        public async Task<ActionResult<Res.Rootobject>> GetMock(
            [FromQuery, DefaultValue("2025-01-15T10:00:00Z")] DateTime? pickupDate,
            [FromQuery, DefaultValue("2025-01-20T10:00:00Z")] DateTime? returnDate,
            [FromQuery, DefaultValue("Medellín")] string? pickupCity,
            [FromQuery, DefaultValue("CO")] string? pickupCountry,
            [FromQuery, DefaultValue("Bogotá")] string? returnCity,
            [FromQuery, DefaultValue("CO")] string? returnCountry,
            [FromQuery, DefaultValue("CO")] string? customerCountry,
            CancellationToken ct)
        {
            if (pickupDate is null || returnDate is null)
                return BadRequest("pickupDate y returnDate son requeridos (formato ISO 8601).");

            if (returnDate <= pickupDate)
                return BadRequest("returnDate debe ser mayor que pickupDate.");

            var result = await _mediator.Send(
                new GetMockAvailabilityWithDatesQuery(
                    pickupDate.Value,
                    returnDate.Value,
                    pickupCity!,
                    pickupCountry!,
                    returnCity!,
                    returnCountry!,
                    customerCountry!
                ),
                ct);
            return Ok(result);
        }
    }
}

